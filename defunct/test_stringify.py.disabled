import logging
import os
import shutil
import subprocess
import unittest

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)


class TestStringify(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        cls.test_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), 'test_data'))
        cls.create_test_file_structure(cls.test_dir)

    @classmethod
    def tearDownClass(cls):
        shutil.rmtree(cls.test_dir)

    @classmethod
    def create_test_file_structure(cls, root):
        os.makedirs(os.path.join(root, "src", "lib"))
        os.makedirs(os.path.join(root, "docs"))
        os.makedirs(os.path.join(root, "tests"))
        os.makedirs(os.path.join(root, "node_modules", "package"))
        os.makedirs(os.path.join(root, "logs", "old"))

        open(os.path.join(root, "file1.txt"), "w").close()
        open(os.path.join(root, "file2.txt"), "w").close()
        open(os.path.join(root, "src", "main.py"), "w").close()
        open(os.path.join(root, "src", "lib", "util.py"), "w").close()
        open(os.path.join(root, "docs", "readme.md"), "w").close()
        open(os.path.join(root, "tests", "test_main.py"), "w").close()
        open(os.path.join(root, "node_modules", "package", "index.js"), "w").close()
        open(os.path.join(root, "logs", "app.log"), "w").close()
        open(os.path.join(root, "logs", "old", "app_2023.log"), "w").close()

    def run_stringify(self, *args):
        cmd = ["python", "stringify.py", self.test_dir] + list(args)
        result = subprocess.run(cmd, capture_output=True, text=True)
        return result.stdout, result.stderr, result.returncode

    def assertInWithContext(self, member, container, msg=None):
        try:
            self.assertIn(member, container[0], msg)
        except AssertionError:
            logger.debug(
                f"\nFailed test command: python stringify.py {self.test_dir} {' '.join(self._testMethodName.split('_')[1:])}")
            logger.debug(f"STDOUT:\n{container[0]}")
            logger.debug(f"STDERR:\n{container[1]}")
            raise

    def assertNotInWithContext(self, member, container, msg=None):
        try:
            self.assertNotIn(member, container[0], msg)
        except AssertionError:
            logger.debug(
                f"\nFailed test command: python stringify.py {self.test_dir} {' '.join(self._testMethodName.split('_')[1:])}")
            logger.debug(f"STDOUT:\n{container[0]}")
            logger.debug(f"STDERR:\n{container[1]}")
            raise

    # def test_default_behavior(self):
    #     output = self.run_stringify()
    #     self.assertInWithContext("file1.txt", output)
    #     self.assertInWithContext("src/main.py", output)
    #     self.assertInWithContext("node_modules/package/index.js", output)
    #
    # def test_single_include(self):
    #     output = self.run_stringify("*.txt")
    #     self.assertInWithContext("file1.txt", output)
    #     self.assertInWithContext("file2.txt", output)
    #     self.assertNotInWithContext("src/main.py", output)
    #
    # def test_single_exclude(self):
    #     output = self.run_stringify("-*.log")
    #     self.assertInWithContext("file1.txt", output)
    #     self.assertNotInWithContext("logs/app.log", output)
    #     self.assertNotInWithContext("logs/old/app_2023.log", output)
    #
    # def test_include_then_exclude(self):
    #     output = self.run_stringify("*.py", "-test_*.py")
    #     self.assertInWithContext("src/main.py", output)
    #     self.assertNotInWithContext("tests/test_main.py", output)
    #
    # def test_exclude_then_include(self):
    #     output = self.run_stringify("-*.py", "src/*.py")
    #     self.assertInWithContext("src/main.py", output)
    #     self.assertNotInWithContext("tests/test_main.py", output)
    #
    # def test_double_asterisk(self):
    #     output = self.run_stringify("**/*.py")
    #     self.assertInWithContext("src/main.py", output)
    #     self.assertInWithContext("src/lib/util.py", output)
    #     self.assertInWithContext("tests/test_main.py", output)

    def test_exclude_directory(self):
        output = self.run_stringify("-node_modules")
        self.assertInWithContext("file1.txt", output)
        self.assertNotInWithContext("node_modules/package/index.js", output)
    #
    # def test_include_file_in_excluded_directory(self):
    #     output = self.run_stringify("-node_modules", "node_modules/package/index.js")
    #     self.assertInWithContext("node_modules/package/index.js", output)
    #     self.assertNotInWithContext("node_modules/some_other_file.js", output)
    #
    # def test_anchored_path(self):
    #     output = self.run_stringify("-/logs/old/*.log")
    #     self.assertInWithContext("logs/app.log", output)
    #     self.assertNotInWithContext("logs/old/app_2023.log", output)
    #
    # def test_unanchored_path(self):
    #     output = self.run_stringify("-*/old/*")
    #     self.assertInWithContext("logs/app.log", output)
    #     self.assertNotInWithContext("logs/old/app_2023.log", output)
    #
    # def test_complex_scenario(self):
    #     output = self.run_stringify("*.py", "src/**", "-test_*.py", "test_critical*.py", "-**/deprecated/**")
    #     self.assertInWithContext("src/main.py", output)
    #     self.assertNotInWithContext("tests/test_main.py", output)
    #
    # # New test cases
    # def test_include_directory_contents(self):
    #     output = self.run_stringify("src/", "src/**")
    #     self.assertInWithContext("src/main.py", output)
    #     self.assertInWithContext("src/lib/util.py", output)
    #     self.assertNotInWithContext("file1.txt", output)
    #
    # def test_exclude_directory_include_subdirectory(self):
    #     output = self.run_stringify("-logs/", "logs/old/", "logs/old/**")
    #     self.assertNotInWithContext("logs/app.log", output)
    #     self.assertInWithContext("logs/old/app_2023.log", output)
    #
    # def test_include_only_mode(self):
    #     output = self.run_stringify("*.py")
    #     self.assertInWithContext("src/main.py", output)
    #     self.assertNotInWithContext("file1.txt", output)
    #     self.assertNotInWithContext("logs/app.log", output)
    #
    # def test_parent_directory_inclusion(self):
    #     output = self.run_stringify("src/lib/util.py")
    #     self.assertInWithContext("src/lib/util.py", output)
    #     self.assertNotInWithContext("src/main.py", output)
    #
    # def test_multiple_patterns(self):
    #     output = self.run_stringify("*.txt", "*.py", "-test_*.py")
    #     self.assertInWithContext("file1.txt", output)
    #     self.assertInWithContext("src/main.py", output)
    #     self.assertNotInWithContext("tests/test_main.py", output)


if __name__ == '__main__':
    unittest.main(verbosity=2)
