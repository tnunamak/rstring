import os
import subprocess
import tempfile
import shutil
import unittest
import signal

class TimeoutException(Exception):
    pass

def timeout_handler(signum, frame):
    raise TimeoutException("Test timed out")


class TestStringify(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        # Create a temporary directory structure for testing
        cls.test_dir = tempfile.mkdtemp()
        cls.create_test_file_structure(cls.test_dir)

    @classmethod
    def tearDownClass(cls):
        # Clean up the temporary directory
        shutil.rmtree(cls.test_dir)

    @classmethod
    def create_test_file_structure(cls, root):
        # Create a complex directory structure for testing
        os.makedirs(os.path.join(root, "src", "lib"))
        os.makedirs(os.path.join(root, "docs"))
        os.makedirs(os.path.join(root, "tests"))
        os.makedirs(os.path.join(root, "node_modules", "package"))
        os.makedirs(os.path.join(root, "logs", "old"))

        # Create some test files
        open(os.path.join(root, "file1.txt"), "w").close()
        open(os.path.join(root, "file2.txt"), "w").close()
        open(os.path.join(root, "src", "main.py"), "w").close()
        open(os.path.join(root, "src", "lib", "util.py"), "w").close()
        open(os.path.join(root, "docs", "readme.md"), "w").close()
        open(os.path.join(root, "tests", "test_main.py"), "w").close()
        open(os.path.join(root, "node_modules", "package", "index.js"), "w").close()
        open(os.path.join(root, "logs", "app.log"), "w").close()
        open(os.path.join(root, "logs", "old", "app_2023.log"), "w").close()

    def run_stringify(self, *args, timeout=5):
        cmd = ["python", "stringify.py", self.test_dir] + list(args)
        
        signal.signal(signal.SIGALRM, timeout_handler)
        signal.alarm(timeout)
        
        try:
            result = subprocess.run(cmd, capture_output=True, text=True)
            signal.alarm(0)  # Cancel the alarm
            return result.stdout
        except TimeoutException:
            self.fail(f"Test timed out after {timeout} seconds")

    def test_default_behavior(self):
        output = self.run_stringify()
        self.assertIn("file1.txt", output)
        self.assertIn("src/main.py", output)
        self.assertIn("node_modules/package/index.js", output)

    def test_single_include(self):
        output = self.run_stringify("-i", "*.txt")
        self.assertIn("file1.txt", output)
        self.assertIn("file2.txt", output)
        self.assertNotIn("src/main.py", output)

    def test_single_exclude(self):
        output = self.run_stringify("-e", "*.log")
        self.assertIn("file1.txt", output)
        self.assertNotIn("logs/app.log", output)
        self.assertNotIn("logs/old/app_2023.log", output)

    def test_include_then_exclude(self):
        output = self.run_stringify("-i", "*.py", "-e", "test_*.py")
        self.assertIn("src/main.py", output)
        self.assertNotIn("tests/test_main.py", output)

    def test_exclude_then_include(self):
        output = self.run_stringify("-e", "*.py", "-i", "src/*.py")
        self.assertIn("src/main.py", output)
        self.assertNotIn("tests/test_main.py", output)

    def test_double_asterisk(self):
        output = self.run_stringify("-i", "**/*.py")
        self.assertIn("src/main.py", output)
        self.assertIn("src/lib/util.py", output)
        self.assertIn("tests/test_main.py", output)

    def test_exclude_directory(self):
        output = self.run_stringify("-e", "node_modules/")
        self.assertIn("file1.txt", output)
        self.assertNotIn("node_modules/package/index.js", output)

    def test_include_file_in_excluded_directory(self):
        output = self.run_stringify("-e", "node_modules/", "-i", "node_modules/package/index.js")
        self.assertIn("node_modules/package/index.js", output)
        self.assertNotIn("node_modules/some_other_file.js", output)

    def test_anchored_path(self):
        output = self.run_stringify("-e", "/logs/old/*.log")
        self.assertIn("logs/app.log", output)
        self.assertNotIn("logs/old/app_2023.log", output)

    def test_unanchored_path(self):
        output = self.run_stringify("-e", "*/old/*")
        self.assertIn("logs/app.log", output)
        self.assertNotIn("logs/old/app_2023.log", output)

    def test_complex_scenario(self):
        output = self.run_stringify("-i", "*.py", "-e", "test_*.py", "-i", "test_critical*.py", "-e", "**/deprecated/**")
        self.assertIn("src/main.py", output)
        self.assertNotIn("tests/test_main.py", output)
        # We would need to add a test_critical.py file to fully test this scenario

if __name__ == '__main__':
    unittest.main()
