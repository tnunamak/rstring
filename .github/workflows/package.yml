name: CI/CD for Rstring

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [published]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
      - name: 'Dependency Review'
        uses: actions/dependency-review-action@v4

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
#        os: [ubuntu-latest, windows-latest, macos-latest]
        os: [ubuntu-latest, macos-latest]
        python-version: [3.11, 3.12]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      - name: Run tests
        run: pytest

  release-please:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}

    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.MY_RELEASE_PLEASE_TOKEN }}
          release-type: python
          manifest-file: .release-please-manifest.json
          config-file: release-please-config.json

  build-and-publish:
    needs: [test, release-please]
    if: needs.release-please.outputs.release_created
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/rstring
    permissions:
      id-token: write
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install pypa/build
        run: python3 -m pip install build --user
      - name: Build a binary wheel and a source tarball
        run: python3 -m build
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  github-release:
    needs: [release-please, build-and-publish]
    if: needs.release-please.outputs.release_created
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
      - uses: actions/checkout@v4
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v3.0.0
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl
      - name: Create GitHub Release and Upload Artifacts
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -e
          echo "Creating GitHub release..."
          gh release create '${{ needs.release-please.outputs.tag_name }}' \
            --repo '${{ github.repository }}' \
            --notes "Release ${{ needs.release-please.outputs.tag_name }}" \
            || { echo "Failed to create release"; exit 1; }

          echo "Uploading artifacts to release..."
          gh release upload '${{ needs.release-please.outputs.tag_name }}' dist/** \
            --repo '${{ github.repository }}' \
            || { echo "Failed to upload artifacts"; exit 1; }

          echo "Release creation and artifact upload completed successfully"

      - name: Set job output
        if: failure()
        run: echo "release_failed=true" >> $GITHUB_OUTPUT
